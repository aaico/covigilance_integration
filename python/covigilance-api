#!/usr/bin/env python

import sys
import webhook
import upload_abstracts as abstracts
import upload_fulltext as fulltext
import argparse
import os
from pathlib import Path
import logging
import json
FORMAT = '%(asctime)s %(message)s'
logging.basicConfig(format=FORMAT, level=logging.INFO)

LOGGER = logging  # logging.getLogger(__name__)
TOKEN = os.environ.get("COVIGILANCE_TOKEN")
ENDPOINT = os.environ.get("COVIGILANCE_API_ENDPOINT",
                          "https://api.covigilance.ai")

if len(sys.argv) < 2:
    print("You need to select one of the commands: webhook, abstracts, fulltext")
    sys.exit(1)

cmd = sys.argv[1]

if cmd == "webhook":
    webhook.start_webhook()
elif cmd == "abstracts":
    parser = argparse.ArgumentParser(
        prog="covigilance-api", description="Upload of abstracts to covigilance.ai"
    )

    parser.add_argument(
        "-t", "--token", help="Machine Authentication Token for the Covigilance API, defaults to the COVIGILANCE_TOKEN from the environment", required=False)
    parser.add_argument("-e", "--endpoint",
                        default="https://api.covigilance.ai",
                        help="Endpoint of the Covigilance Backend")
    parser.add_argument('abstracts')
    parser.add_argument(
        'file', help="File with abstracts. Can be json, csv, or excel")
    parser.add_argument(
        '--start', help="Defines a start in the list if used with length", default=0, type=int)
    parser.add_argument(
        '--length', help="Maximum length of abstracts to push. Can be combined with start to slice a file.", type=int, default=None)

    parse = parser.parse_args()
    token = parse.token if parse.token else TOKEN
    path = Path(parse.file)

    data = abstracts.load_abstracts(
        path, start=parse.start, length=parse.length)
    res = abstracts.upload_abstracts(
        data, token=token, endpoint=parse.endpoint)
    LOGGER.info(json.dumps(res, indent=2))

elif cmd == "fulltext":
    parser = argparse.ArgumentParser(
        prog="covigilance-api fulltext", description="Upload of PDF to covigilance.ai"
    )

    parser.add_argument(
        "-t", "--token", help="Machine Authentication Token for the Covigilance API, defaults to the COVIGILANCE_TOKEN from the environment", required=False)
    parser.add_argument("-e", "--endpoint",
                        default="https://api.covigilance.ai",
                        help="Endpoint of the Covigilance Backend")
    parser.add_argument('fulltext')
    parser.add_argument(
        'path', help="Path to PDF or folder of pdf")
    parser.add_argument(
        '--product', help="Product the pdf should be analyzed for", required=True)

    parse = parser.parse_args()
    token = parse.token if parse.token else TOKEN
    path = Path(parse.path)

    if path.is_file():
        res = fulltext.upload_pdf(path, product=parse.product, token=token,
                                  endpoint=parse.endpoint)
    else:
        res = fulltext.upload_folder(
            path, product=parse.product, token=token, endpoint=parse.endpoint)

    LOGGER.info(json.dumps(res, indent=2))
